name: Build and push a new release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+'

permissions:
  contents: write

env:
  AWS_REGION: eu-west-2
  ECR_REPOSITORY: webops/cloud-platform-go-get-module-ecr

jobs:
  docker:
    name: Build container, push to ECR and deploy to the cluster
    strategy:
      matrix:
        env: ["development", "production"]
    environment: ${{ matrix.env }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Get Tags for Image
        id: metadata
        uses: docker/metadata-action@v4
        with:
          images: ministryofjustice/cloud-platform-go-get-module
          tags: |
            type=ref,event=tag

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_URL: ${{ secrets.ECR_URL }}
          IMAGE_TAG: ${{ github.ref_name }}
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin ${{ env.ECR_URL }}
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG .
          docker tag $ECR_REPOSITORY:$IMAGE_TAG ${{ env.ECR_URL }}:$IMAGE_TAG
          docker push ${{ env.ECR_URL }}:$IMAGE_TAG
          echo "IMAGE_TAG=$IMAGE_TAG" >> $GITHUB_OUTPUT
          echo "FULL_IMAGE_ADDR=${{ env.ECR_URL }}:$IMAGE_TAG" >> $GITHUB_OUTPUT

      - name: Set cluster
        id: set-cluster
        run: |
          if [ ${{ matrix.env }} == "development" ]
          then
            echo "CLUSTER=live-2" >> $GITHUB_OUTPUT
          elif [ ${{ matrix.env }} == "production" ]
          then
            echo "CLUSTER=live" >> $GITHUB_OUTPUT
          fi

      - name: Create cert certificate-authority
        id: create-cert-authority
        run: echo "${{ secrets.KUBE_CERT }}" > ca.crt

      - name: Authenticate to the cluster
        id: authenticate
        env:
          KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
        run: |
          kubectl config set-cluster "${KUBE_CLUSTER}" --certificate-authority=ca.crt --server="${KUBE_CLUSTER}"
          kubectl config set-credentials deploy-user --token="${{ secrets.KUBE_TOKEN }}"
          kubectl config set-context "${KUBE_CLUSTER}" --cluster="${KUBE_CLUSTER}" --user=deploy-user --namespace="${{ secrets.KUBE_NAMESPACE }}"
          kubectl config use-context "${KUBE_CLUSTER}"

          # export flat kube config so helm image can read it
          echo 'FLAT_KUBE_CONFIG<<EOF' >> $GITHUB_ENV
          kubectl config view --flatten >> $GITHUB_ENV
          echo 'EOF' >> $GITHUB_ENV

      - name: Deploy image to K8 cloud-platform-go-get-module (${{ matrix.env }}) namespace
        id: deploy-image
        uses: vimeda/helm@v1.6.8
        with:
          release: go-get-module
          namespace: cloud-platform-go-get-module
          chart: deploy
          values: |
            ecrUrl: ${{ secrets.ECR_URL }}
            imageTag: ${{ steps.build-image.outputs.IMAGE_TAG }}
            cluster: ${{ steps.set-cluster.outputs.CLUSTER }}
        env:
          KUBECONFIG_FILE: ${{ env.FLAT_KUBE_CONFIG }}

