name: Deploy

on:
  workflow_call:
    inputs:
      env:
        description: 'which environment to deploy to'
        required: true
        type: string
      image_tag:
        description: 'the tag to deploy'
        type: string
        required: true
    secrets:
      ecr_url:
        description: 'the url for the ecr repo, where the image is pulled from'
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.env }}
    steps:
        - name: Checkout
          uses: actions/checkout@v4

        - name: Set cluster
          id: set-cluster
          shell: bash
          run: |
            if [ "${{ inputs.env }}" == "development" ]
            then
              echo "CLUSTER=live-2" >> $GITHUB_OUTPUT
              echo "INGRESS_COLOUR=blue" >> $GITHUB_OUTPUT
            elif [ ${{ inputs.env }} == "production" ]
            then
              echo "CLUSTER=live" >> $GITHUB_OUTPUT
              echo "INGRESS_COLOUR=green" >> $GITHUB_OUTPUT
            fi

        - name: Create cert certificate-authority
          id: create-cert-authority
          shell: bash
          run: echo "${{ secrets.KUBE_CERT }}" > ca.crt

        - name: Authenticate to the cluster
          shell: bash
          id: authenticate
          env:
            KUBE_CLUSTER: ${{ secrets.KUBE_CLUSTER }}
          run: |
            kubectl config set-cluster "${KUBE_CLUSTER}" --certificate-authority=ca.crt --server="${KUBE_CLUSTER}"
            kubectl config set-credentials deploy-user --token="${{ secrets.KUBE_TOKEN }}"
            kubectl config set-context "${KUBE_CLUSTER}" --cluster="${KUBE_CLUSTER}" --user=deploy-user --namespace="${{ secrets.KUBE_NAMESPACE }}"
            kubectl config use-context "${KUBE_CLUSTER}"

            # export flat kube config so helm image can read it
            echo 'FLAT_KUBE_CONFIG<<EOF' >> $GITHUB_ENV
            kubectl config view --flatten >> $GITHUB_ENV
            echo 'EOF' >> $GITHUB_ENV

        - name: Deploy image to K8 cloud-platform-go-get-module (${{ inputs.env }}) namespace
          id: deploy-image
          uses: vimeda/helm@v1.7.0
          with:
            release: go-get-module
            namespace: ${{ secrets.KUBE_NAMESPACE }}
            chart: deploy
            values: |
              ecrUrl: ${{ secrets.ecr_url }}
              imageTag: ${{ inputs.image_tag }}
              cluster: ${{ steps.set-cluster.outputs.CLUSTER }}
              ingressIdentifier: api-${{ secrets.KUBE_NAMESPACE }}-${{ steps.set-cluster.outputs.INGRESS_COLOUR }}
              namespace: ${{ secrets.KUBE_NAMESAPCE }}
          env:
            KUBECONFIG_FILE: ${{ env.FLAT_KUBE_CONFIG }}


